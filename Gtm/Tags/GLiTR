// V1.0.0. __ 05-09-2024
window.glitr_pageview_fired = false;
  
// Production or preview - based on CUE environment param
if ({{dl.environment}} == "prod") {
  var isProd = true; 
} else {
  var isProd = false; 
}
  
window._mhtracker = window._mhtracker || {};
var tracker = window._mhtracker;
tracker.initialized = tracker.initialized || {};
tracker.config = tracker.config || {};
tracker.config.heartbeatEnabled = true;
tracker.initialized = tracker.initialized || {};
  
if (!isProd) {
  console.log({{var.glitr_object}});
  console.log({{var.glitr_object}}.view_endpoint);
  console.log({{var.glitr_object}}.heartbeat_endpoint);
  console.log({{var.glitr_object}}.scripturl);
  console.log({{var.glitr_object-scripturl}});
}
  
tracker.config.api = {{var.glitr_object}}.view_endpoint;
tracker.config.viewApi = {{var.glitr_object}}.view_endpoint;
tracker.config.heartbeatApi = {{var.glitr_object}}.heartbeat_endpoint;
tracker.config.scriptUrl = {{var.glitr_object-scripturl}};
tracker.config.debug = !isProd;
  
function glitr_pageview() {
  console.log('%c GLiTR loaded ', 'background: #FF6A00; color: #FFFFFF');
  
  // get localstorage params
  var glitr_params = localStorage.getItem('glitr');
  var now = new Date().getTime();
  
  if (glitr_params === null) { // first visit, there's an empty localstorage
    glitr = {
      viewsequence: 1,
      timestamp: now,
      previousviewid: null,
      previouspagetype: null,
      sessionid: {{var.sessionid}},
      previousurl: null,
      referrer: document.referrer
    };
  } else {  // object already exists from the previous pagevisit
    var glitr = JSON.parse(glitr_params);
    var lasttime = parseInt(glitr.timestamp);
    
    if (now - lasttime > 30 * 60 * 1000) { // 30 min * 60 sec * 1000 ms, new session after 30 minutes. Object exist but old
      glitr.viewsequence = 1;
      glitr.previousviewid = null;
      glitr.previouspagetype = null;
      glitr.sessionid = {{var.sessionid}};
      glitr.previousurl = null;
      glitr.referrer = document.referrer;
    } else { // continue counting, next pageview. Active, relevant Object exists
      glitr.viewsequence = glitr.viewsequence + 1;
      
      if (sessionStorage.getItem('glitr-session') === null) { // existing visit opened new tab
        glitr.referrer =  document.referrer; 
      } 
      
    }
  }
  if (glitr.previousurl === "") { glitr.previousurl = null; }
  if (glitr.referrer === "") { glitr.referrer = null; }
  
  window.glitr_viewid = {{var.viewid}}; // generates a new one on every call, gives error if not defined. Is used as backup if CUE doesn't provide the viewid in the dataLayer
  
  glitrobject = {
    application: "www",  
    brandcode: {{dl.brandcode}},
    //commented out mapping cookieid: dl - clientid, // cookieid wordt ook gezet door de tracker maar bewust voor onze eigen value gekozen omdat deze persistent is
    canonicalurl:  {{dl.canonicalurl}} === false ? null : {{dl.canonicalurl}},                       
    environment: {{dl.environment}}, // dev, preview or prod
    identityaccountid: {{CJ - identityaccountid [with consent]}}, // SSO ID mag alleen meegestuurd worden bij juiste consent
    identityaccounttype: {{dl.identityaccounttype}},  
    identityauthenticationlevel: {{dl.identityauthenticationlevel}},
    isnewdataformat: true,
    loginstatus: {{dl.loginstatus}},
    pagesecuretype: {{dl.pagesecuretype}},  
    pagetitle: {{var.pagetitle}},
    pageurl: {{_url}},
    previousurl: glitr.previousurl,
    previousviewid: glitr.previousviewid,
    referrer: glitr.referrer,
    sessionid: glitr.sessionid,
    subscriptionstatus: {{dl.subscriptionstatus}},
    subscriptiontype: {{dl.subscriptiontype}},
    viewid: ({{dl.viewid}} ? {{dl.viewid}} : glitr_viewid),
    viewsequence: glitr.viewsequence, 
   
    
      
    /* in this section we identify all the properties with a specific business logic/ value per page type, they must be added to every page type. */   
    
    accessloginshown: {{dl.accessloginshown}}, //  indicates is if login screen is shown, true or false. by default false at the moment
    accesswalltype: {{dl.accesswalltype}}, //indicates which login screen is shown none, plus or register  
    outputid: {{dl.outputid}}, // Indicates Zephr flow  
    pagesectionname: {{dl.pagesectionname}},
    pagesectiontrees: {{dl.pagesectiontrees}},  
    pagesecure: {{dl.pagesecure}},   
    pagetype: {{dl.pagetype}}, // Depending on what page you opened a specific pagetype is used
    previouspagetype: glitr.previouspagetype,  

    /* article property */   
    articleauthor: ({{dl.articleauthor}} === "" ? null : {{dl.articleauthor}}),
    articlebodycharactercount: ({{dl.articlebodycharactercount}} === "" ? null : {{dl.articlebodycharactercount}}), // amount of characters an articlebody holds 
    articlecontenttype: {{dl.articlecontenttype}}, //  The content type of the article, this can be article, video, photoset
    articleid: ({{dl.articleid}} === false ? null : {{dl.articleid}}), // article id which from the article editing system + removed the quotes to make it a string
    articlepublicationdateinutc: ({{dl.articlepublicationdateinutc}} === false ? null : {{dl.articlepublicationdateinutc}}), //example 2020-04-01T05:06:42.000Z  
    articlesource: {{dl.articlesource}}, // no description available 
    articletaglist: {{dl.articletaglist}},
    articletitle: ({{dl.articletitle}} === false ? null : {{dl.articletitle}}), // Title of the article.
    articletype: ({{dl.articletype}} === false ? null : {{dl.articletype}}),
    dnagenre: {{dl.dnagenre}},
    dnareason: {{dl.dnareason}},
    dnamedium: {{dl.dnamedium}},
    dnauserneed: {{dl.dnauserneed}},  
       
    //continue here
      
    /* utm parameters */     
    pageutmcampaign: {{var.utm_campaign}},
    pageutmcontent: {{var.utm_content}},
    pageutmmedium: {{var.utm_medium}},
    pageutmsource: {{var.utm_source}},
    pageutmterm: {{var.utm_term}}
  }; 
  
  Object.assign(glitrobject, {{CJ - GLiTR - Consent properties}});
  
  // Save all in localstorage
  glitr.previousurl = {{_url}};
  glitr.previouspagetype = {{dl.pagetype}};
  glitr.previousviewid = glitr_viewid;
  glitr.referrer = glitr.previousurl
  glitr.timestamp = now;
  localStorage.setItem('glitr', JSON.stringify(glitr));
  sessionStorage.setItem('glitr-session', 'started');
    
  function launchGlitrTracking()
  {
    if (typeof window._mhtracker.logView == "function") {
      window._mhtracker.logView(glitrobject);
      window._mhtracker.initView();
      window._mhtracker.startHeartbeat();
      window._mhtracker.initEvent();
      
      window.glitr_pageview_fired = true;
    } else {
      setTimeout(function() { launchGlitrTracking() }, 200);
    }
  }
  launchGlitrTracking();      
      
};
  
if (typeof window.glitr_script_added == "undefined")
{
  var head = document.getElementsByTagName('head')[0];
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.src = {{var.glitr_object-scripturl}};
  script.async = true;
  script.addEventListener("load", function() { glitr_pageview() });
  head.appendChild(script);
  window.glitr_script_added = true;
} else {
  if (typeof _mhtracker.resetHeartbeat === "function") { _mhtracker.resetHeartbeat(); }
  glitr_pageview();
}